# コンパイラ
CC			= g++
# コンパイラオプション
CFLAGS		= -std=c++14 -stdlib=libc++ -O2 -MMD -MP -Wall -Wextra -Winit-self 
# リンクオプション
ifeq "$(shell getconf LONG_BIT)" "64"
  LDFLAGS	= -mpthread
else
  LDFLAGS	= -mpthread
endif
# 静的リンクするライブラリ
LIBS		=
# インクルードパスの指定



INCLUDE   = -I../include -I/usr/local/include
# 生成される実行ファイル
TARGETS   = a.out
# 生成されるバイナリファイルの出力ディレクトリ
TARGETDIR = ../bin
# ソースコードの位置
SRCROOT   = .
# 中間バイナリファイルの出力ディレクトリ
OBJROOT   = ../obj
# ソースディレクトリの中を(shellの)findコマンドで走破してサブディレクトリまでリスト化する
SRCDIRS  := $(shell find $(SRCROOT) -type d)
# ソースディレクトリを元にforeach命令で全cppファイルをリスト化する
SOURCES   = $(foreach dir, $(SRCDIRS), $(wildcard $(dir)/*.cpp))
# 上記のcppファイルのリストを元にオブジェクトファイル名を決定
OBJECTS   = $(addprefix $(OBJROOT)/, $(SOURCES:.cpp=.o)) 
# ソースディレクトリと同じ構造で中間バイナリファイルの出力ディレクトリをリスト化
OBJDIRS   = $(addprefix $(OBJROOT)/, $(SRCDIRS)) 
# 依存ファイル.dを.oファイルから作る
DEPENDS   = $(OBJECTS:.o=.d)

# 依存ファイルを元に実行ファイルを作る
$(TARGETS): $(OBJECTS) $(LIBS)
	$(CC) -o $(TARGETDIR)/$@ $^ $(LDFLAGS)

# 中間バイナリのディレクトリを掘りながら.cppを中間ファイル.oに
$(OBJROOT)/%.o: $(SRCROOT)/%.cpp
	@if [ ! -e `dirname $@` ]; then mkdir -p `dirname $@`; fi
	$(CC) $(CFLAGS) $(INCLUDE) -o $@ -c $<

# 依存関係ファイル
-include $(DEPENDS)